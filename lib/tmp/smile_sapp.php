<?php defined('SMILE_PATH')||die();Smile::config(array ( 'tpldir' => 'D:/www/github/smile/lib/template/', 'cachedir' => 'D:/www/github/smile/lib/tmp/cache/', 'tagdir' => 'D:/www/github/smile/lib/smilesys/tag/', 'functiondir' => 'D:/www/github/smile/lib/smilesys/function/', 'widgetdir' => 'D:/www/github/smile/lib/smilesys/widget/', 'configfile' => 'D:/www/github/smile/lib/config/config.php', 'cacheon' => true, 'cachetime' => -1, 'tagbegin' => '<', 'tagend' => '>', 'varbegin' => '{', 'varend' => '}', 'autotags' => 'Smile', 'firsttags' => 'First', 'nested' => 3, 'tplsuffix' => '.php', 'cachesuffix' => '.php', 'forcefuntion' => array ( ), 'forcewidget' => array ( ), 'compressphp' => false, 'compresshtml' => false, 'compressjs' => false, 'compressjsfile' => false, 'compresscss' => false, 'securestr' => '<?php defined(\'SMILE_PATH\')||die();?>', 'deletedependence' => false, 'dependencetype' => 'File', 'jsdir' => 'D:/www/github/smile/lib/../demo/example/', 'cssdir' => 'D:/www/github/smile/lib/../demo/css/,D:/www/github/smile/lib/../demo/example/', 'combine' => true, 'minifyurl' => 'D:/www/github/smile/lib/vendor/min/', 'minifygroupsconfigfilepath' => 'D:\\www\\github\\smile\\lib\\vendor\\min\\groupsConfig.php', 'combinejs' => false, 'combinecss' => false, )); class Smile { protected $tpVar = array (); function assign($name, $val = '') { if (is_string($name)) { $this->tpVar[$name] = $val; }else { $this->tpVar = array_merge($this->tpVar,$name); } } function display($template, $cahceId = NULL, $params = array()) { $this->fetch ( $template, $cahceId, array_merge($params,array ('display' => TRUE )) ); } function fetch($template, $cacheId = NULL, $params = array()) { isset($params['display']) || $params['display'] = FALSE; if (!self::checkCache($template,$cacheId,$params)) { $this->compile($template,$cacheId,$params); } $cachePath = Smile::getCacheFilePath($template,$cacheId,$params); if (isset($params['display']) && !$params['display']) { ob_start(); ob_implicit_flush(0); } extract($this->tpVar); include $cachePath; if (isset($params['display']) && !$params['display']) { return ob_get_clean(); } } function compile($template,$cacheId,$params) { $st = self::getInstance('SmileTemplate',TRUE); return $st->load($template,$this->tpVar,$cacheId,$params); } static function getTemplateFilePath($template, $cacheId = NULL, $params = NULL) { if (file_exists($template)) { return $template; } $path = Smile::config('tplDir').str_replace(array(':',''),'/',$template).Smile::config('tplSuffix'); if (strpos($path,'\\')) { $path = str_replace('\\','/',$path); } return $path; } static function checkCache($template, $cacheId = NULL, $params = NULL) { if (!Smile::config('cacheOn')) { return FALSE; } $cacheFile = self::getCacheFilePath($template, $cacheId , $params); $tplFile = self::getTemplateFilePath($template, $cacheId , $params); $cacheTime = isset($params['cacheTime'])?$params['cacheTime']:Smile::config('cacheTime'); if (!file_exists($cacheFile)) { return FALSE; }elseif (filemtime($tplFile) > filemtime($cacheFile)){ return FALSE; }elseif ($cacheTime!=-1 && filemtime($cacheFile)+$cacheTime>time()){ return FALSE; } return TRUE; } static function delCache($template=NULL, $cacheId = NULL, $params = NULL) { self::requireOnce(SMILE_PATH.'/smilesys/smiledeletecache.php'); smileDeleteCache($template,$cacheId,$params,$this); } static function getCacheFilePath($template, $cacheId = NULL, $params = NULL) { $template = self::getTemplateFilePath($template, $cacheId , $params ); $ret = ''; if($cacheId){ if(is_string($cacheId)) { $ret .= $cacheId.'/'; }else { if ($cacheId['dir']) { if (is_array($cacheId['dir'])) { $ret .= implode('/',$cacheId['dir']).'/'; }else { $ret .= $cacheId['dir'].'/'; } } if ($cacheId['id']) { if (is_array($cacheId['id'])) { $ret .= implode('.',$cacheId['id']).'.'; }else { $ret .= $cacheId['id'].'.'; } } } } $ret =Smile::config('cacheDir').$ret.basename($template,Smile::config('tplSuffix')).Smile::config('cacheSuffix'); if (strpos($ret,"\\")) { $ret = str_replace("\\",'/',$ret); } return $ret; } function get($name) { return $this->tpVar[$name]; } static function requireOnce($path) { static $_cache = array(); if (!isset($_cache[$path])) { require $path; $_cache[$path]=TRUE; } } static function getInstance($className,$newInstance=FALSE,$param=NULL) { static $_class = array(); if (strpos($className, ',')){ $aClass = explode(',', $className); $className = $aClass[0]; $requiredPath= $aClass[1]; }else { $path = array( 'SmileTemplate' => SMILE_SYS_PATH.'SmileTemplate.php', 'CompressCode' => SMILE_SYS_PATH.'CompressCode.php', ); $requiredPath = $path[$className]; } if (!$newInstance && isset($_class[$className])) { return $_class[$className]; } self::requireOnce($requiredPath); if ($param) { $cls = new $className ($param); }else { $cls = new $className; } $_class[$className] = $cls; return $cls; } static function config($name=NULL,$value=NULL) { static $_config = array(); if (is_null($name)) { return $_config; } if (is_string($name)) { $name = strtolower($name); if (! strpos ( $name, '.' )) { if (is_null($value)) return isset($_config[$name])?$_config[$name]:null; $_config[$name] = $value; return; } $name = explode('.', $name); $config = &$_config; $confKey= array_pop($name); foreach ($name as $k) { if (!isset($config[$k])) { $config[$k] = array(); } $config = &$config[$k]; } if (is_null ( $value )) return isset($config[$confKey])?$config[$confKey]:NULL; $config[$confKey] = $value; return; } if (is_array($name)) { return $_config = array_merge ( $_config, array_change_key_case ( $name ) ); } return NULL; } }